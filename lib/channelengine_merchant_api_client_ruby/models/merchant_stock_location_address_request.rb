=begin
#ChannelEngine Merchant API

#ChannelEngine API for merchants

The version of the OpenAPI document: 2.13.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.0.0-SNAPSHOT

=end

require 'date'
require 'time'

module ChannelEngineMerchantApiClient
  class MerchantStockLocationAddressRequest
    attr_accessor :country_iso

    attr_accessor :street_name

    attr_accessor :zip_code

    attr_accessor :house_nr

    attr_accessor :house_nr_addition

    attr_accessor :city

    attr_accessor :region

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'country_iso' => :'CountryIso',
        :'street_name' => :'StreetName',
        :'zip_code' => :'ZipCode',
        :'house_nr' => :'HouseNr',
        :'house_nr_addition' => :'HouseNrAddition',
        :'city' => :'City',
        :'region' => :'Region'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'country_iso' => :'String',
        :'street_name' => :'String',
        :'zip_code' => :'String',
        :'house_nr' => :'String',
        :'house_nr_addition' => :'String',
        :'city' => :'String',
        :'region' => :'String'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'street_name',
        :'zip_code',
        :'house_nr',
        :'house_nr_addition',
        :'city',
        :'region'
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `ChannelEngineMerchantApiClient::MerchantStockLocationAddressRequest` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `ChannelEngineMerchantApiClient::MerchantStockLocationAddressRequest`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'country_iso')
        self.country_iso = attributes[:'country_iso']
      end

      if attributes.key?(:'street_name')
        self.street_name = attributes[:'street_name']
      end

      if attributes.key?(:'zip_code')
        self.zip_code = attributes[:'zip_code']
      end

      if attributes.key?(:'house_nr')
        self.house_nr = attributes[:'house_nr']
      end

      if attributes.key?(:'house_nr_addition')
        self.house_nr_addition = attributes[:'house_nr_addition']
      end

      if attributes.key?(:'city')
        self.city = attributes[:'city']
      end

      if attributes.key?(:'region')
        self.region = attributes[:'region']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @country_iso.nil?
        invalid_properties.push('invalid value for "country_iso", country_iso cannot be nil.')
      end

      if !@street_name.nil? && @street_name.to_s.length > 50
        invalid_properties.push('invalid value for "street_name", the character length must be smaller than or equal to 50.')
      end

      if !@street_name.nil? && @street_name.to_s.length < 0
        invalid_properties.push('invalid value for "street_name", the character length must be great than or equal to 0.')
      end

      if !@house_nr.nil? && @house_nr.to_s.length > 50
        invalid_properties.push('invalid value for "house_nr", the character length must be smaller than or equal to 50.')
      end

      if !@house_nr.nil? && @house_nr.to_s.length < 0
        invalid_properties.push('invalid value for "house_nr", the character length must be great than or equal to 0.')
      end

      if !@house_nr_addition.nil? && @house_nr_addition.to_s.length > 50
        invalid_properties.push('invalid value for "house_nr_addition", the character length must be smaller than or equal to 50.')
      end

      if !@house_nr_addition.nil? && @house_nr_addition.to_s.length < 0
        invalid_properties.push('invalid value for "house_nr_addition", the character length must be great than or equal to 0.')
      end

      if !@city.nil? && @city.to_s.length > 50
        invalid_properties.push('invalid value for "city", the character length must be smaller than or equal to 50.')
      end

      if !@city.nil? && @city.to_s.length < 0
        invalid_properties.push('invalid value for "city", the character length must be great than or equal to 0.')
      end

      if !@region.nil? && @region.to_s.length > 50
        invalid_properties.push('invalid value for "region", the character length must be smaller than or equal to 50.')
      end

      if !@region.nil? && @region.to_s.length < 0
        invalid_properties.push('invalid value for "region", the character length must be great than or equal to 0.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @country_iso.nil?
      return false if !@street_name.nil? && @street_name.to_s.length > 50
      return false if !@street_name.nil? && @street_name.to_s.length < 0
      return false if !@house_nr.nil? && @house_nr.to_s.length > 50
      return false if !@house_nr.nil? && @house_nr.to_s.length < 0
      return false if !@house_nr_addition.nil? && @house_nr_addition.to_s.length > 50
      return false if !@house_nr_addition.nil? && @house_nr_addition.to_s.length < 0
      return false if !@city.nil? && @city.to_s.length > 50
      return false if !@city.nil? && @city.to_s.length < 0
      return false if !@region.nil? && @region.to_s.length > 50
      return false if !@region.nil? && @region.to_s.length < 0
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] street_name Value to be assigned
    def street_name=(street_name)
      if !street_name.nil? && street_name.to_s.length > 50
        fail ArgumentError, 'invalid value for "street_name", the character length must be smaller than or equal to 50.'
      end

      if !street_name.nil? && street_name.to_s.length < 0
        fail ArgumentError, 'invalid value for "street_name", the character length must be great than or equal to 0.'
      end

      @street_name = street_name
    end

    # Custom attribute writer method with validation
    # @param [Object] house_nr Value to be assigned
    def house_nr=(house_nr)
      if !house_nr.nil? && house_nr.to_s.length > 50
        fail ArgumentError, 'invalid value for "house_nr", the character length must be smaller than or equal to 50.'
      end

      if !house_nr.nil? && house_nr.to_s.length < 0
        fail ArgumentError, 'invalid value for "house_nr", the character length must be great than or equal to 0.'
      end

      @house_nr = house_nr
    end

    # Custom attribute writer method with validation
    # @param [Object] house_nr_addition Value to be assigned
    def house_nr_addition=(house_nr_addition)
      if !house_nr_addition.nil? && house_nr_addition.to_s.length > 50
        fail ArgumentError, 'invalid value for "house_nr_addition", the character length must be smaller than or equal to 50.'
      end

      if !house_nr_addition.nil? && house_nr_addition.to_s.length < 0
        fail ArgumentError, 'invalid value for "house_nr_addition", the character length must be great than or equal to 0.'
      end

      @house_nr_addition = house_nr_addition
    end

    # Custom attribute writer method with validation
    # @param [Object] city Value to be assigned
    def city=(city)
      if !city.nil? && city.to_s.length > 50
        fail ArgumentError, 'invalid value for "city", the character length must be smaller than or equal to 50.'
      end

      if !city.nil? && city.to_s.length < 0
        fail ArgumentError, 'invalid value for "city", the character length must be great than or equal to 0.'
      end

      @city = city
    end

    # Custom attribute writer method with validation
    # @param [Object] region Value to be assigned
    def region=(region)
      if !region.nil? && region.to_s.length > 50
        fail ArgumentError, 'invalid value for "region", the character length must be smaller than or equal to 50.'
      end

      if !region.nil? && region.to_s.length < 0
        fail ArgumentError, 'invalid value for "region", the character length must be great than or equal to 0.'
      end

      @region = region
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          country_iso == o.country_iso &&
          street_name == o.street_name &&
          zip_code == o.zip_code &&
          house_nr == o.house_nr &&
          house_nr_addition == o.house_nr_addition &&
          city == o.city &&
          region == o.region
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [country_iso, street_name, zip_code, house_nr, house_nr_addition, city, region].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = ChannelEngineMerchantApiClient.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
