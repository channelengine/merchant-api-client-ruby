=begin
#ChannelEngine Merchant API

#ChannelEngine API for merchants

The version of the OpenAPI document: 2.11.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.0.0-SNAPSHOT

=end

require 'cgi'

module ChannelEngineMerchantApiClient
  class OfferApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Get stock for products.
    # Get stock of products at stock location(s).
    # @param stock_location_ids [Array<Integer>] The ChannelEngine id of the stock location(s).
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :skus List of your products&#39; sku&#39;s.
    # @option opts [Integer] :page_index A page index to get the items (starts from 0)
    # @option opts [Integer] :page_size Number of items to return (default 100)
    # @return [CollectionOfMerchantOfferGetStockResponse]
    def offer_get_stock(stock_location_ids, opts = {})
      data, _status_code, _headers = offer_get_stock_with_http_info(stock_location_ids, opts)
      data
    end

    # Get stock for products.
    # Get stock of products at stock location(s).
    # @param stock_location_ids [Array<Integer>] The ChannelEngine id of the stock location(s).
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :skus List of your products&#39; sku&#39;s.
    # @option opts [Integer] :page_index A page index to get the items (starts from 0)
    # @option opts [Integer] :page_size Number of items to return (default 100)
    # @return [Array<(CollectionOfMerchantOfferGetStockResponse, Integer, Hash)>] CollectionOfMerchantOfferGetStockResponse data, response status code and response headers
    def offer_get_stock_with_http_info(stock_location_ids, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OfferApi.offer_get_stock ...'
      end
      # verify the required parameter 'stock_location_ids' is set
      if @api_client.config.client_side_validation && stock_location_ids.nil?
        fail ArgumentError, "Missing the required parameter 'stock_location_ids' when calling OfferApi.offer_get_stock"
      end
      if @api_client.config.client_side_validation && !opts[:'page_index'].nil? && opts[:'page_index'] > 2147483647
        fail ArgumentError, 'invalid value for "opts[:"page_index"]" when calling OfferApi.offer_get_stock, must be smaller than or equal to 2147483647.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_index'].nil? && opts[:'page_index'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_index"]" when calling OfferApi.offer_get_stock, must be greater than or equal to 0.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 500
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling OfferApi.offer_get_stock, must be smaller than or equal to 500.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling OfferApi.offer_get_stock, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/v2/offer/stock'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'stockLocationIds'] = @api_client.build_collection_param(stock_location_ids, :multi)
      query_params[:'skus'] = @api_client.build_collection_param(opts[:'skus'], :multi) if !opts[:'skus'].nil?
      query_params[:'pageIndex'] = opts[:'page_index'] if !opts[:'page_index'].nil?
      query_params[:'pageSize'] = opts[:'page_size'] if !opts[:'page_size'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'CollectionOfMerchantOfferGetStockResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKey']

      new_options = opts.merge(
        :operation => :"OfferApi.offer_get_stock",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OfferApi#offer_get_stock\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update stock and/or price.
    # Update stock and/or price of product(s).
    # @param merchant_stock_price_update_request [Array<MerchantStockPriceUpdateRequest>] References to the products that should be updated, and the new values&lt;br /&gt;for the stock or price fields. It is possible to supply only one of the two fields&lt;br /&gt;or both.
    # @param [Hash] opts the optional parameters
    # @return [SingleOfDictionaryOfStringAndListOfString]
    def offer_stock_price_update(merchant_stock_price_update_request, opts = {})
      data, _status_code, _headers = offer_stock_price_update_with_http_info(merchant_stock_price_update_request, opts)
      data
    end

    # Update stock and/or price.
    # Update stock and/or price of product(s).
    # @param merchant_stock_price_update_request [Array<MerchantStockPriceUpdateRequest>] References to the products that should be updated, and the new values&lt;br /&gt;for the stock or price fields. It is possible to supply only one of the two fields&lt;br /&gt;or both.
    # @param [Hash] opts the optional parameters
    # @return [Array<(SingleOfDictionaryOfStringAndListOfString, Integer, Hash)>] SingleOfDictionaryOfStringAndListOfString data, response status code and response headers
    def offer_stock_price_update_with_http_info(merchant_stock_price_update_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OfferApi.offer_stock_price_update ...'
      end
      # verify the required parameter 'merchant_stock_price_update_request' is set
      if @api_client.config.client_side_validation && merchant_stock_price_update_request.nil?
        fail ArgumentError, "Missing the required parameter 'merchant_stock_price_update_request' when calling OfferApi.offer_stock_price_update"
      end
      # resource path
      local_var_path = '/v2/offer'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json-patch+json', 'application/json', 'application/*+json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(merchant_stock_price_update_request)

      # return_type
      return_type = opts[:debug_return_type] || 'SingleOfDictionaryOfStringAndListOfString'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKey']

      new_options = opts.merge(
        :operation => :"OfferApi.offer_stock_price_update",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OfferApi#offer_stock_price_update\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update only stock.
    # Update only stock of product(s).
    # @param merchant_offer_stock_update_request [Array<MerchantOfferStockUpdateRequest>] References to the new values for the stock fields
    # @param [Hash] opts the optional parameters
    # @return [SingleOfDictionaryOfStringAndListOfString]
    def offer_stock_update(merchant_offer_stock_update_request, opts = {})
      data, _status_code, _headers = offer_stock_update_with_http_info(merchant_offer_stock_update_request, opts)
      data
    end

    # Update only stock.
    # Update only stock of product(s).
    # @param merchant_offer_stock_update_request [Array<MerchantOfferStockUpdateRequest>] References to the new values for the stock fields
    # @param [Hash] opts the optional parameters
    # @return [Array<(SingleOfDictionaryOfStringAndListOfString, Integer, Hash)>] SingleOfDictionaryOfStringAndListOfString data, response status code and response headers
    def offer_stock_update_with_http_info(merchant_offer_stock_update_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OfferApi.offer_stock_update ...'
      end
      # verify the required parameter 'merchant_offer_stock_update_request' is set
      if @api_client.config.client_side_validation && merchant_offer_stock_update_request.nil?
        fail ArgumentError, "Missing the required parameter 'merchant_offer_stock_update_request' when calling OfferApi.offer_stock_update"
      end
      # resource path
      local_var_path = '/v2/offer/stock'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json-patch+json', 'application/json', 'application/*+json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(merchant_offer_stock_update_request)

      # return_type
      return_type = opts[:debug_return_type] || 'SingleOfDictionaryOfStringAndListOfString'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKey']

      new_options = opts.merge(
        :operation => :"OfferApi.offer_stock_update",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OfferApi#offer_stock_update\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
